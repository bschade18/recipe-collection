{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","visibility","recipeInput","ingredInput","stepsInput","currentRecipe","recipes","recipeTitle","ingredients","steps","dialogMode","toggleVisibility","bind","handleChange","handleIngChange","handleStepsChange","closeVisibility","setCurrent","fillForm","handleDelete","handleEdit","this","console","log","recipe","i","length","document","getElementById","value","edit","filter","setState","concat","e","recipeArray","target","id","setTimeout","event","innerHTML","confirmDelete","window","confirm","newRecipe","input","editRecipe","React","Component","RecipeList","list","map","index","key","onClick","RecipeDisplay","showRecipe","className","RecipeForm","placeholder","type","onChange","currentValue","rows","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d17b478a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: true,\n      recipeInput: \"\",\n      ingredInput: \"\",\n      stepsInput: \"\",\n      currentRecipe: \"burgers\",\n      recipes: [{ recipeTitle: \"burgers\", ingredients: \"beef\", steps: \"cook\" }],\n      dialogMode: \"\"\n    };\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleIngChange = this.handleIngChange.bind(this);\n    this.handleStepsChange = this.handleStepsChange.bind(this);\n    this.closeVisibility = this.closeVisibility.bind(this);\n    this.setCurrent = this.setCurrent.bind(this);\n\n    this.fillForm = this.fillForm.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n  fillForm() {\n    let currentRecipe = this.state.currentRecipe;\n    console.log(currentRecipe);\n    let recipes = this.state.recipes;\n    let recipe;\n    console.log(recipes[0].recipeTitle);\n    for (var i = 0; i < recipes.length; i++) {\n      if (currentRecipe == recipes[i].recipeTitle) {\n        recipe = recipes[i];\n      }\n    }\n    document.getElementById(\"edit-recipe\").value = recipe.recipeTitle;\n    document.getElementById(\"edit-ingredients\").value = recipe.ingredients;\n    document.getElementById(\"edit-steps\").value = recipe.steps;\n  }\n\n  handleEdit() {\n    let recipes = this.state.recipes;\n    let currentRecipe = this.state.currentRecipe;\n    let edit = recipes.filter(recipe => {\n      return currentRecipe !== recipes.recipeTitle;\n    });\n    this.setState({\n      recipes: edit.concat({\n        recipeTitle: this.state.recipeInput,\n        ingredients: this.state.ingredInput,\n        steps: this.state.stepsInput\n      })\n    });\n  }\n  toggleVisibility(e) {\n    let recipeArray = this.state.recipes;\n    if (e.target.id == \"edit\") {\n      this.setState({\n        dialogMode: \"edit\"\n      });\n      setTimeout(() => this.fillForm(), 20);\n    } else {\n      this.setState({\n        dialogMode: \"add\"\n      });\n    }\n    if (this.state.visibility) {\n      this.setState({\n        visibility: false,\n        recipes: recipeArray.concat({\n          recipeTitle: this.state.recipeInput,\n          ingredients: this.state.ingredInput,\n          steps: this.state.stepsInput\n        }),\n        currentRecipe: this.state.recipeInput,\n        recipeInput: \"\",\n        ingredInput: \"\",\n        stepsInput: \"\"\n      });\n    } else {\n      this.setState({\n        visibility: true\n      });\n    }\n  }\n  closeVisibility() {\n    if (this.state.visibility) {\n      this.setState({\n        visibility: false,\n        recipeInput: \"\",\n        ingredInput: \"\",\n        stepsInput: \"\"\n      });\n    } else {\n      this.setState({\n        visibility: true\n      });\n    }\n  }\n\n  handleChange(event) {\n    const { value } = event.target;\n    this.setState({\n      recipeInput: value\n    });\n  }\n  handleIngChange(event) {\n    const { value } = event.target;\n    this.setState({\n      ingredInput: value\n    });\n  }\n  handleStepsChange(event) {\n    const { value } = event.target;\n    this.setState({\n      stepsInput: value\n    });\n  }\n  setCurrent(e) {\n    this.setState({\n      currentRecipe: e.target.innerHTML\n    });\n  }\n\n  handleDelete() {\n    let confirmDelete = window.confirm(\n      \"Are you sure you want to delete this recipe?\"\n    );\n    let recipes = this.state.recipes;\n    let currentRecipe = this.state.currentRecipe;\n    let filter = recipes.filter(recipe => {\n      return recipe.recipeTitle !== currentRecipe;\n    });\n\n    if (confirmDelete == true) {\n      this.setState({\n        recipes: filter\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 id=\"title\">Recipe Box</h1>\n        <RecipeList recipes={this.state.recipes} setCurrent={this.setCurrent} />\n        <RecipeDisplay\n          toggleVisibility={this.toggleVisibility}\n          newRecipe={this.state.recipe}\n          ingredients={this.state.ingredients}\n          currentRecipe={this.state.currentRecipe}\n          recipes={this.state.recipes}\n          handleDelete={this.handleDelete}\n        />\n        <RecipeForm\n          input={this.state.recipeInput}\n          handleChange={this.handleChange}\n          toggleVisibility={this.toggleVisibility}\n          closeVisibility={this.closeVisibility}\n          visibility={this.state.visibility}\n          newRecipe={this.state.recipe}\n          ingredInput={this.state.ingredInput}\n          handleIngChange={this.handleIngChange}\n          handleStepsChange={this.handleStepsChange}\n          dialogMode={this.state.dialogMode}\n          currentRecipe={this.state.currentRecipe}\n          recipes={this.state.recipes}\n          editRecipe={this.handleEdit}\n        />\n        <h3>{this.state.dialogMode}</h3>\n        <h3>{this.state.currentRecipe}</h3>\n        <h3>{this.state.recipeInput}</h3>\n      </div>\n    );\n  }\n}\n\nclass RecipeList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    var list = this.props.recipes.map((recipe, index) => {\n      return (\n        <div key={index} onClick={this.props.setCurrent}>\n          {recipe.recipeTitle}\n        </div>\n      );\n    });\n\n    return <div id=\"recipeList\">{list}</div>;\n  }\n}\n\nclass RecipeDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let showRecipe;\n    let recipes = this.props.recipes;\n    let currentRecipe = this.props.currentRecipe;\n    for (var i = 0; i < recipes.length; i++) {\n      if (currentRecipe == recipes[i].recipeTitle) {\n        showRecipe = (\n          <div id=\"recipeDisplay\">\n            <h3>{currentRecipe}</h3>\n            <h4>Ingredients:</h4>\n            <h5>{recipes[i].ingredients}</h5>\n            <h4>Steps:</h4>\n            <h5>{recipes[i].steps}</h5>\n\n            <button className=\"\" onClick={this.props.toggleVisibility}>\n              Add Recipe\n            </button>\n            <button\n              id=\"edit\"\n              className=\"\"\n              onClick={this.props.toggleVisibility}\n            >\n              Edit Recipe\n            </button>\n            <button className=\"\" onClick={this.props.handleDelete}>\n              Delete Recipe\n            </button>\n          </div>\n        );\n      }\n    }\n\n    return <div>{showRecipe}</div>;\n  }\n}\n\nclass RecipeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  render() {\n    if (this.props.visibility) {\n      return (\n        <div id=\"dialog\">\n          <form>\n            {this.props.dialogMode == \"edit\" ? (\n              <div>\n                <div className=\"input-title\">\n                  Edit Recipe\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-recipe\"\n                  placeholder=\"enter recipe name\"\n                  type=\"text\"\n                  onChange={this.props.handleChange}\n                  value={this.props.currentValue}\n                />\n                <br />\n                <div className=\"input-title\">\n                  Ingredients\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-ingredients\"\n                  rows=\"5\"\n                  placeholder=\"enter ingredients\"\n                  type=\"text\"\n                  onChange={this.props.handleIngChange}\n                  value={this.props.ingredInput}\n                />\n                <br />\n                <div className=\"input-title\">\n                  Steps\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-steps\"\n                  rows=\"10\"\n                  placeholder=\"enter steps\"\n                  type=\"text\"\n                  onChange={this.props.handleStepsChange}\n                  value={this.props.stepsInput}\n                />\n                <br />\n              </div>\n            ) : (\n              <div>\n                <div className=\"input-title\">\n                  Add Recipe\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-recipe\"\n                  placeholder=\"enter recipe name\"\n                  type=\"text\"\n                  onChange={this.props.handleChange}\n                  value={this.props.input}\n                />\n                <br />\n                <div className=\"input-title\">\n                  Ingredients\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-ingredients\"\n                  rows=\"5\"\n                  placeholder=\"enter ingredients\"\n                  type=\"text\"\n                  onChange={this.props.handleIngChange}\n                  value={this.props.ingredInput}\n                />\n                <br />\n                <div className=\"input-title\">\n                  Steps\n                  <br />\n                </div>\n                <textarea\n                  id=\"edit-steps\"\n                  rows=\"10\"\n                  placeholder=\"enter steps\"\n                  type=\"text\"\n                  onChange={this.props.handleStepsChange}\n                  value={this.props.stepsInput}\n                />\n                <br />\n              </div>\n            )}\n\n            {this.props.dialogMode == \"edit\" ? (\n              <button onClick={this.props.editRecipe}>Save</button>\n            ) : (\n              <button onClick={this.props.toggleVisibility}>Add</button>\n            )}\n\n            <button onClick={this.props.closeVisibility}>Close</button>\n          </form>\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}